<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>powershell on i-py.com</title>
    <link>https://i-py.com/tags/powershell/</link>
    <description>Recent content in powershell on i-py.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All Content Copyright © - Francis Setash</copyright>
    <lastBuildDate>Sun, 29 Jan 2017 12:32:30 -0500</lastBuildDate>
    
	<atom:link href="https://i-py.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ChefDK - Visual Studio Code Support</title>
      <link>https://i-py.com/posts/2017-01-29-chef-vscode-tidbit/</link>
      <pubDate>Sun, 29 Jan 2017 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2017-01-29-chef-vscode-tidbit/</guid>
      <description>&lt;p&gt;Super quick post, but one I wanted to throw down - here&amp;rsquo;s how to get Visual Studio Code working for the ChefDK in Windows; and I&amp;rsquo;ll also share my Visual Studio Code preferences file!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chef - dsc_script vs dsc_resource</title>
      <link>https://i-py.com/posts/2017-01-27-chef-powershell-dsc/</link>
      <pubDate>Fri, 27 Jan 2017 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2017-01-27-chef-powershell-dsc/</guid>
      <description>&lt;p&gt;As I continue to experiment with my chef environment, I&amp;rsquo;ve run into an interesting limitation with the dsc_script resource.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jenkins, Powershell DSC, and CI</title>
      <link>https://i-py.com/posts/2017-01-11-jenkins-dsc-ci/</link>
      <pubDate>Wed, 11 Jan 2017 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2017-01-11-jenkins-dsc-ci/</guid>
      <description>&lt;p&gt;DSC is truly one of my favorite things to come out of the PowerShell team to date. The power for idempotent infrastructure and deployment is great. However, one &lt;em&gt;relatively&lt;/em&gt; minor roadblock is getting an MOF delivery pipeline in place for getting the MOF configurations to a pull server.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AzureRM - Bootstrapping DSC LCM</title>
      <link>https://i-py.com/posts/2017-01-10-bootstrapping-dsc-azurerm/</link>
      <pubDate>Tue, 10 Jan 2017 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2017-01-10-bootstrapping-dsc-azurerm/</guid>
      <description>&lt;p&gt;So, a brief tidbit if you&amp;rsquo;re not using Azure automation for your Azure VMs (we have a subset that are managed with a pull server that are not Azure automation controlled. So, at provisioning time we wanted to look at provisioning the VM with the LCM meta configuration, to avoid additional work by hand. It&amp;rsquo;s pretty simple, but required a different approach between WMF 4.0 and WMF 5.0 (read: Server 2012 and Server 2016). Let&amp;rsquo;s discuss:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Azure RM - CustomData Injection</title>
      <link>https://i-py.com/posts/2016-12-29-azurerm-customdata/</link>
      <pubDate>Thu, 29 Dec 2016 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2016-12-29-azurerm-customdata/</guid>
      <description>In building out some Azure templates recently - once again - documentation turned out to be a bit thin. The goal was to inject custom data into a VM with data from the output of a resource created in the same deployment</description>
    </item>
    
    <item>
      <title>Azure RM - JsonADDomainExtension - Error 1332</title>
      <link>https://i-py.com/posts/2016-12-23-azure-joindomain/</link>
      <pubDate>Fri, 23 Dec 2016 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2016-12-23-azure-joindomain/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working with Azure RM Templating quite a lot lately. It&amp;rsquo;s actually pretty staggering in how versatile it is, but some of the documentation is a bit less than awesome.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cDscDocker 1.2.0 - Now With Daemon Support</title>
      <link>https://i-py.com/posts/2016-11-16-cdscdocker-120-daemon/</link>
      <pubDate>Wed, 16 Nov 2016 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2016-11-16-cdscdocker-120-daemon/</guid>
      <description>&lt;p&gt;Woohoo; now we&amp;rsquo;re cooking with fire. The cDscDocker resource has been updated to include giving the ability to expose the docker daemon on an interface address of your choice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pushing Data to Dashing.io from PowerShell</title>
      <link>https://i-py.com/posts/2015-09-04-pushing-data-dashing-io-powershell/</link>
      <pubDate>Thu, 20 Aug 2015 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2015-09-04-pushing-data-dashing-io-powershell/</guid>
      <description>&lt;p&gt;Dashing.io; super cool, and pretty fly. Easy enough to configure a quick and small linux VM to host it. But how about pushing data to it, from Powershell? The key is Invoke-RestMethod- Let&amp;rsquo;s look at two of the simple built in widgets:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick Tidbit: Download and Install MSI with PowerShell</title>
      <link>https://i-py.com/posts/2015-08-09-quick-msi-download-and-install/</link>
      <pubDate>Sun, 09 Aug 2015 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2015-08-09-quick-msi-download-and-install/</guid>
      <description>&lt;p&gt;This one comes via needing to deploy via GFI Remote Management and DropBox. This scenario was needed for a deployment of a VPN client in a GFI managed environment where there was no Active Directory present. Very simply put; PowerShell pulls from a public DropBox link, and silently installs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick Tidbit: PowerShell Random Password Generator</title>
      <link>https://i-py.com/posts/2015-08-07-quick-powershell-password-generator/</link>
      <pubDate>Fri, 07 Aug 2015 12:32:30 -0500</pubDate>
      
      <guid>https://i-py.com/posts/2015-08-07-quick-powershell-password-generator/</guid>
      <description>&lt;p&gt;I had a need for a quick and dirty password generator for an AD user creation script. There&amp;rsquo;s likely a better way to do this, but I wanted to have it fairly modular so it can be customized on the fly to meet organizational password requirements.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>